name: CI/CD Pipeline

on:
  push:
    branches:
      - "main"

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  IMAGE_NAME: spring-hello-problem

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  helm-validation:
    # 这个任务将在 build-and-push 任务成功后运行
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 使用现成的 action 来安装 Helm
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.10.0' # 确保使用一个兼容你集群的版本

      - name: Set Helm chart path
        id: chart
        run: echo "CHART_PATH=./spring-hello-chart" >> $GITHUB_ENV

      - name: Helm lint (语法和最佳实践检查)
        run: helm lint ${{ env.CHART_PATH }}

      - name: Helm dry-run (模板渲染和值验证)
        # --dry-run --debug 模拟部署，并打印所有生成的 YAML
        # --set 参数用于动态覆盖 values.yaml 中的 image.tag
        run: |
          helm install my-app ${{ env.CHART_PATH }} \
          --dry-run \
          --debug \
          --set image.tag=${{ github.sha }} \
          --namespace my-app
